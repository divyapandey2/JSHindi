/*JavaScript provides a rich set of built-in methods for manipulating arrays efficiently. Here is a comprehensive list of array methods available in JavaScript:

### Iteration Methods

1. **forEach**
   - Executes a provided function once for each array element.
   ```javascript
   array.forEach(function(currentValue, index, array) {
       // Function logic
   });
   ```

2. **map**
   - Creates a new array populated with the results of calling a provided function on every element in the calling array.
   ```javascript
   let newArray = array.map(function(currentValue, index, array) {
       return // New element value
   });
   ```

3. **filter**
   - Creates a new array with all elements that pass the test implemented by the provided function.
   ```javascript
   let newArray = array.filter(function(currentValue, index, array) {
       return // Condition for elements to be included
   });
   ```

4. **find**
   - Returns the first element in the array that satisfies the provided testing function.
   ```javascript
   let result = array.find(function(currentValue, index, array) {
       return // Condition to find the element
   });
   ```

5. **findIndex**
   - Returns the index of the first element in the array that satisfies the provided testing function.
   ```javascript
   let index = array.findIndex(function(currentValue, index, array) {
       return // Condition to find the element
   });
   ```

6. **every**
   - Tests whether all elements in the array pass the test implemented by the provided function.
   ```javascript
   let result = array.every(function(currentValue, index, array) {
       return // Condition to test each element
   });
   ```

7. **some**
   - Tests whether at least one element in the array passes the test implemented by the provided function.
   ```javascript
   let result = array.some(function(currentValue, index, array) {
       return // Condition to test each element
   });
   ```

### Modification Methods

8. **reduce**
   - Applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.
   ```javascript
   let result = array.reduce(function(accumulator, currentValue, index, array) {
       return // Updated accumulator value
   }, initialValue);
   ```

9. **reduceRight**
   - Applies a function against an accumulator and each element in the array (from right to left) to reduce it to a single value.
   ```javascript
   let result = array.reduceRight(function(accumulator, currentValue, index, array) {
       return // Updated accumulator value
   }, initialValue);
   ```

10. **sort**
    - Sorts the elements of an array in place and returns the sorted array.
    ```javascript
    array.sort(function(firstElement, secondElement) {
        return // Sorting logic
    });
    ```

11. **reverse**
    - Reverses the elements of an array in place.
    ```javascript
    array.reverse();
    ```

12. **slice**
    - Returns a shallow copy of a portion of an array into a new array object.
    ```javascript
    let newArray = array.slice(start, end);
    ```

13. **splice**
    - Changes the contents of an array by removing or replacing existing elements and/or adding new elements.
    ```javascript
    array.splice(start, deleteCount, item1, item2, ...);
    ```

### Accessor Methods

14. **concat**
    - Returns a new array that is a concatenation of two or more arrays.
    ```javascript
    let newArray = array.concat(array2, array3, ...);
    ```

15. **includes**
    - Determines whether an array includes a certain element, returning `true` or `false` as appropriate.
    ```javascript
    let result = array.includes(searchElement[, fromIndex]);
    ```

16. **indexOf**
    - Returns the first index at which a given element can be found in the array, or `-1` if it is not present.
    ```javascript
    let index = array.indexOf(searchElement[, fromIndex]);
    ```

17. **lastIndexOf**
    - Returns the last index at which a given element can be found in the array, or `-1` if it is not present. The array is searched backwards, starting at `fromIndex`.
    ```javascript
    let index = array.lastIndexOf(searchElement[, fromIndex]);
    ```

18. **join**
    - Joins all elements of an array into a string.
    ```javascript
    let result = array.join(separator);
    ```

### Mutator Methods

19. **push**
    - Adds one or more elements to the end of an array and returns the new length of the array.
    ```javascript
    let newLength = array.push(element1, element2, ...);
    ```

20. **pop**
    - Removes the last element from an array and returns that element.
    ```javascript
    let removedElement = array.pop();
    ```

21. **shift**
    - Removes the first element from an array and returns that removed element.
    ```javascript
    let removedElement = array.shift();
    ```

22. **unshift**
    - Adds one or more elements to the beginning of an array and returns the new length of the array.
    ```javascript
    let newLength = array.unshift(element1, element2, ...);
    ```

23. **fill**
    - Fills all the elements of an array from a start index to an end index with a static value.
    ```javascript
    array.fill(value[, start[, end]]);
    ```

24. **copyWithin**
    - Copies array elements within the array, to and from specified positions.
    ```javascript
    array.copyWithin(target, start[, end]);
    ```

### Conversion Methods

25. **toString**
    - Returns a string representing the specified array and its elements.
    ```javascript
    let result = array.toString();
    ```

26. **toLocaleString**
    - Returns a string representing the elements of the array using local conventions.
    ```javascript
    let result = array.toLocaleString();
    ```

### Property Methods

27. **length**
    - Reflects the number of elements in an array.
    ```javascript
    let arrayLength = array.length;
    ```

### Miscellaneous Methods

28. **isArray**
    - Determines whether the passed value is an array.
    ```javascript
    let result = Array.isArray(value);
    ```

### Notes:
- The methods listed above are supported in modern JavaScript environments (ES5 and above).
- Some methods (like `forEach`, `map`, `reduce`, etc.) accept a callback function as an argument, allowing for custom logic to be applied to each element of the array.
- Methods like `sort`, `reverse`, `splice`, and others modify the original array in place unless otherwise specified.
  
These array methods provide powerful capabilities for manipulating and querying arrays in JavaScript, making them essential tools for developers working with array data structures.